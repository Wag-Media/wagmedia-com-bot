generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id            String     @id
  title         String
  content       String?
  userId        Int
  user          User       @relation(fields: [userId], references: [id])
  reactions     Reaction[]
  categories    Category[]
  tags          Tag[] // One-to-many relationship with Tag
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  isPublished   Boolean    @default(false)
  isFeatured    Boolean    @default(false)
  totalEarnings Float?     @default(0)
  Payment       Payment[]
}

model User {
  id        Int        @id @default(autoincrement())
  discordId String     @unique
  posts     Post[]
  reactions Reaction[]
  avatar    String?
  bio       String?
  name      String?
  Payment   Payment[]
}

model Reaction {
  id               Int       @id @default(autoincrement())
  emojiId          String
  emoji            Emoji     @relation(fields: [emojiId], references: [id])
  userDiscordId    String
  user             User      @relation(fields: [userDiscordId], references: [discordId])
  postId           String
  post             Post      @relation(fields: [postId], references: [id])
  createdAt        DateTime  @default(now())
  initiatesPayment Boolean   @default(false)
  Payment          Payment[]

  @@unique([postId, userDiscordId, emojiId])
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  posts        Post[]
  emojiId      String         @unique
  emoji        Emoji          @relation(fields: [emojiId], references: [id])
  CategoryRule CategoryRule[]
}

model Emoji {
  id String @id

  name       String? // Name of the emoji, especially important for custom emojis
  emojiChar  String? // For standard unicode emojis
  discordId  String?  @unique // Unique ID for custom Discord emojis
  isAnimated Boolean? // Whether the custom emoji is animated

  reactions Reaction[]
  category  Category?

  reactionId   Int?
  categoryId   Int?
  PaymentRule  PaymentRule[]
  CategoryRule CategoryRule[]
}

model Tag {
  id     Int    @id @default(autoincrement())
  name   String @unique
  postId String
  post   Post   @relation(fields: [postId], references: [id])
}

model LastProcessedPost {
  channelId String   @id
  postId    String
  updatedAt DateTime @updatedAt
}

// A payment is a record of a power user paying for a post they reacted to
model Payment {
  id         Int      @id @default(autoincrement())
  amount     Float
  status     String // e.g., "pending", "completed"
  postId     String
  post       Post     @relation(fields: [postId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  reactionId Int
  reaction   Reaction @relation(fields: [reactionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([postId, userId, reactionId])
}

// Rules for how much to pay for a given reaction
model PaymentRule {
  id            Int    @id @default(autoincrement())
  emojiId       String @unique
  emoji         Emoji  @relation(fields: [emojiId], references: [id])
  paymentAmount Float
  paymentUnit   String
}

// Rules for which category a post belongs to
model CategoryRule {
  id         Int      @id @default(autoincrement())
  emojiId    String   @unique
  emoji      Emoji    @relation(fields: [emojiId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
}
